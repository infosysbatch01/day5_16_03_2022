
int num[]; // num is an array of int type and we have declared the array
num=new int[5]; // Array will be of size 5, this is array initialisation
// As the array is of int the elements are initialised with the 
// value 0

public class ArrayDemo1{
  
  public static void main(String args[]){
    int num[]=new int[5];
    for(int i=0;i<num.length;i++){
     System.out.println(num[i]);
    }  // end of for loop
   }  // end of main
  } // end of class
  

public class ArrayDemo2{
  
  public static void main(String args[]){
    int num[];
    num=new int[5];
    for(int i=0;i<num.length;i++){
     System.out.println(num[i]);
    }  // end of for loop
   }  // end of main
  } // end of class
  


public class ArrayDemo3{
  
  public static void main(String args[]){
    int num[]={1,2,3,3,10};
    for(int i=0;i<num.length;i++){
     System.out.println(num[i]);
    }  // end of for loop
   }  // end of main
  } // end of class


We have a Student class and we need to store marks for the Student in 
3 subjects.

class Student {}

int marks[]=new int[3]; 
-----------------------------------------------------------------------------

public class Student {
private int roll;
private String name;
private int marks[];
public int getRoll() {
	return roll;
}
public void setRoll(int roll) {
	this.roll = roll;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public int[] getMarks() {
	return marks;
}
public void setMarks(int[] marks) {
	this.marks = marks;
}
}

import java.util.Scanner;

public class StudentMain {
// Ctrl+Shift+o ( shortcut to get import statement
	public static void main(String[] args) {
		
		Student student=new Student();
        Scanner scanner=new Scanner(System.in);
        System.out.println("Enter the roll number");
        int roll=scanner.nextInt();
        student.setRoll(roll);
        System.out.println("Enter the name");
        String name=scanner.next();
        student.setName(name);
        System.out.println("Enter the marks");
        // marks is local to the main method
        // Can we have different name for marks or 
        // it should be exactly same as instance
        // variable marks of Student class?
        // Ans Yes
        int marks[]=new int[3];
        for(int i=0;i<marks.length;i++) {
        	System.out.println("Enter marks");
        	marks[i]=scanner.nextInt();
        } // end of for loop
	    student.setMarks(marks);
	   System.out.println("The details");
	   roll=student.getRoll();
	   //System.out.println(student.getRoll());
	   System.out.println(roll);
	   name=student.getName();
	   System.out.println(name);
	   marks=student.getMarks();
	   //System.out.println(marks);
	   for(int i=0;i<marks.length;i++)
	   {
		   System.out.println(marks[i]);
	   }
	   
	}

}
-----------------------------------------------------------------------------------------------------
An Employee is having id,name and address. We need to store 2 addresses.
 public class Employee{
  id
  name
  address
  [Hint for address , we have to declare an array of type String
 }
 public class EmployeeMain{ }
--------------------------------------------------------------------------------------------------
[Hint demo for accepting a String array.

import java.util.Scanner;
public class ArrayDemo4{
  
  public static void main(String args[]){
    String names[]=new String[3];
    Scanner scanner=new Scanner(System.in);
    for(int i=0;i<names.length;i++){
     System.out.println("Enter name");
     names[i]=scanner.nextLine();
    }
    for(int i=0;i<names.length;i++){
     System.out.println(names[i]);
   
   }  // end of for loop
   }  // end of main
  } // end of class

------------------------------------------------------------------------------------------------
A ClassRoom class have many students. Represent a class for the same. ClassRoom class will have
className and studentsName.
public class ClassRoom {
private String className;
private String studentsName[];

// setter/getters
}

public class ClassRoomMain{
   public static void main(String args[]) {
     ClassRoom classRoom1=new ClassRoom();
     ClassRoom classRoom2=new ClassRoom();
     Scanner scan=new Scanner(System.in);
     System.out.println("Enter the class name");
     String className=scan.next();
     classRoom1.setClassName(className);
     System.out.println("Enter the number of students for the first class");
     int numberOfStudents=scan.nextInt();
     String studentNames[]=new String[numberOfStudents];
     for(int i=0;i<studentNames.length;i++){
      System.out.println("Enter the student name");
      studentNames[i]=scan.nextLine();
     }
     classRoom1.setStudentsName(studentNames);
     // In the above statement we are associating the array of Students with the classRoom1 object.
     System.out.println("Enter the class name for the second class");
     className=scan.next();
     classRoom2.setClassName(className); 
     System.out.println("Enter the number of students for the second class");
     numberOfStudent=scan.nextInt();
     studentNames=new String[numberOfStudents];
     for(int i=0;i<studentNames.length;i++){
      System.out.println("Enter the student name");
      studentNames[i]=scan.nextLine();
     }   
     classRoom2.setStudentsName(studentNames);



    } 
 }









-----------------------------------------------------------------------------------------------
Array of Object I need to store the details of multiple Books

 public class Book {
       private int id; 
       private String title;
       private float price;
     // setter/getters
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public float getPrice() {
		return price;
	}
	public void setPrice(float price) {
		this.price = price;
	}
 
    }

   import java.util.Scanner;
   public class BookMain{
    public static void main(String args[]){
      Scanner scan=new Scanner(System.in);
      System.out.println("How many books to enter");
      int size=scan.nextInt();
      Book books[]=new Book[size];
      /*for(int i=0;i<books.length;i++){
        System.out.println(books[i]);
       } */
       for(int i=0;i<books.length;i++){
            books[i]=new Book();  
            System.out.println("Enter the book id");
            int id=scan.nextInt();
            books[i].setId(id); 
            System.out.println("Enter the book title");
            String title=scan.next();
            books[i].setTitle(title);
            System.out.println("Enter the book price");
            float price=scan.nextFloat();
            books[i].setPrice(price);
      }  // end of for loop

     for(int i=0;i<books.length;i++){
        System.out.println(books[i].getId());
        System.out.println(books[i].getTitle());
        System.out.println(books[i].getPrice());      
     }
    // for reading only we can use foreach loop. We can use foreach when we want access each element
    // and store the details in the array
    for(Book book : books) {
      System.out.println(book.getId());
      System.out.println(book.getTitle());
      System.out.println(book.getPrice());
    }

    }   // end of main
  }    // end of class
=======================================================================================================

Design a class Item with itemId, itemName and price. Accept the number of items from user.
-----------------------------------------------------------------------------------------
   

public class ArrayDemo5{
  
  public static void main(String args[]){
    int num[]={1,2,3,3,10};
    for(int value : num){
     System.out.println(value);
    }  // end of for loop
   }  // end of main
  } // end of class

public class ArrayDemo6{
  
  public static void main(String args[]){
    String names[]={"Rajiv","Tushar","Harish"};
    for(String name : names){
     System.out.println(name);
    }  // end of for loop
   }  // end of main
  } //

-----------------------------------------------------------------------

public class Customer{
  private int id;
  private String name;
  private String address;

 public Customer(int id, String name, String address){
   this.id=id;
   this.name=name;
   this.address=address;
 }

 public void dispData(){
  System.out.println("The id"+id);
  System.out.println("The name"+name);
  System.out.println("The address"+address);
  }
}

public class CustomerMain{
   public static void main(String str[]) {
    Customer customers[]=new Customer[3];
    customers[0]=new Customer(1,"Om","Delhi");
    customers[1]=new Customer(2,"Suresh","Chennai");
    customers[2]=new Customer(3,"Vivek","Mumbai");
    for(Customer customer : customers){
      customer.dispData();
    }
  }
}
----------------------------------------------------------------------------------------------

import java.util.Scanner;
public class ArrayDemo7
{
public static void main(String args[]){
int numbers[][]=new int[2][3];  // 2 is the number of rows and 3 is the number of columns
Scanner scan=new Scanner(System.in);
// numbers.length will return the number of rows in our example the number of rows are 2
// System.out.println(numbers[0].length);   //3
// System.out.println(numbers[1].length);   //3
for(int row=0;row<numbers.length;row++)
{
   for(int col=0;col<numbers[row].length;col++){
      System.out.println("Enter the number");
      numbers[row][col]=scan.nextInt();
   } // inner loop  for columns
}   // outer loop   for rows
for(int row=0;row<numbers.length;row++)
{
   for(int col=0;col<numbers[row].length;col++){
      System.out.print( numbers[row][col]+"\t");
     
   } // inner loop  for columns
 System.out.println();
}  // outer loop   for rows
}
}
----------------------------

public class ArrayDemo8 {
    public static void main(String args[]) {
     int numbers[][]={{1,2,3},{4,5,6},{7,8,9}};
     for(int row=0;row<numbers.length;row++)
{
   for(int col=0;col<numbers[row].length;col++){
      System.out.print( numbers[row][col]+"\t");
     
   } // inner loop  for columns
 System.out.println();
}  
-------------------------------------------------------------------------------------------------------
A Student can have roll, name and marks for 3 subjects and 2 attempts. Find the average and display
the student roll,name and marks with the average being displayed.
We can have entry for multiple students.  

  public class Student {
   private int roll;
   private String name;
   private int marks[][];

  setter(roll,name and marks)/getter(roll and name) 
// plan to find the average for the attempts
public void calculateAverage()
  // display the marks and average of the marks in each subject in this method
}

 public class StudentMain{
   public static void main(String args[]){
    int marks[][]=new int[3][2];
    System.out.println("Enter the number of students");
    int size=scanner.nextInt();
    Student student[]=new Student[size];
    /* Write a for loop for 
      1) For creating objects
      2) For storing id,name and marks */
    /* Write a for loop for 
       1) For displaying id and name
       2) calculateAverage()    */
    Scanner scanner=new Scanner(System.in);
    /* 1) accept id,name and marks
       2) call the setter methods
       3) a) all the getter methods
          b) call the calculateAverage method to show the marks and the average of the attempts
   }
 }
-------------------------------------------------------------------------------------------------------
Q Why we are passing a String array in main method?
A The array is of String type and it is called command line argument. 

Q What is command line argument?
A A command line argument/arguments are sent from the command line when we execute the program.
  javac Hello.java -------> Hello.class ----------------> java Hello Ravi Ashok // Ravi Ashok are
command line arguments
 public class CommandLine {
    public static void main(String args[]){
     System.out.println(args[0]);  // Ravi
     System.out.println(args[1]);  // Ashok
     System.out.println(args.length); // 2
     
     for(int i=0;i<args.length;i++)
     {
    	 System.out.println(args[i]);
     }
     for(String str : args)
     {
    	 System.out.println(str);
     }
     
    }
 }
[Note: If we don't set any command line argument we get an exception.
  Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0 at CommandLine.main(CommandLine.java:3)]

Q How we can pass command line argument while working in Eclipse?
A Right click on the code editor. Run As-----> Run Configurations(You get a dialog box) Select
  arguments tab from the dialog box. Write arguments in the box , program arguments.
  After providing the arguments, click on Run button and see the output.
 public class CommandLine2 {
  public static void main(String args[]){
   for(String str : args)
     {
    	 System.out.println(str.toUpperCase());
     }
}
}

------------------------------------------------------------------------------------------



1 public class Debug {
2     public static void add() {
3              System.out.println("Hello");
4              System.out.println("Hi");
5              System.out.println("Done");
6        }
7   public static void main(String args[]) {
8        add();
9    }
10  }

Suppose we have set the breakpoint on line add with add method.
When we are in add method , if we press F5. 
   It will move into the println method defination of line 3. 
   But when we are in line3 and if we press F6, It will move to line4 and still we continue with 
   F6 it move the next line where we have printed Done.
   But being in line 4 or 3 or 5 if we press F7, control is taken back to line9.

---------------------------------------------------------------------------------------------
* Static variable
* instance variable
* local variable                    

 
  public class Main {
   public static void main(String args[]) {
     System.out.println("Hello");
   }
 }


  public class Number1{
    private int num;  // instance variable
    private static int static_num; // static variable or class variable
   
    public Number1(int n1, int sn1){
         num=n1;
         static_num=sn1;
    }

    public void display(){
     System.out.println(num+"\t"+static_num);
     
    }
  }

  

  public class NumberMain1 {
    public static void main(String args[]){
       Number1 num1=new Number1(1,2);
       Number1 num2=new Number1(3,4);
       Number1 num3=new Number1(5,6);
       num1.display();  // 1  6
       num2.display();  // 3  6
       num3.display();  // 5  6
     }
  }    

[In the above example we got the knowledge that static variable is shared by all the objects.
 For a class we have a single copy of static variable but for instance variables, the number of copies
 depend on number of objects. So if we have 3 objects ,we will be having 3 copies of instance 
 variables.]

 public class Number2{
     int num;  // instance variable
    static int static_num; // static variable or class variable
   
   
  }

  

  public class NumberMain2 {
    public static void main(String args[]){
       Number2 num1=new Number2();
       Number2 num2=new Number2();
       Number2 num3=new Number2();
       num1.num=1;
       num1.static_num=2;
       num2.num=3;
       num1.static_num=4;
       num3.num=5;
       num3.static_num=6;
       System.out.println(num1.num);  //1
       System.out.println(num1.static_num); //6
       System.out.println(num2.num); // 3
       System.out.println(num2.static_num); //6
       System.out.println(num3.num); // 5
       System.out.println(num3.static_num); //6
       System.out.println(Number2.static_num);  //6
      // Line 18, which is accessing with class name is much 
      // prefered for static variables
     }
  }    
[static variable as they are related to class and are shared by all the objects, so rather than
accessing them through objects , we access them through class names.Though static variable can
be accessed by objects but we access static variables with the class name. Instance variable cannot
be accessed with the classname]


Q When we can initialise a static variable?
A We have static blocks to initialise static variable . We dont use constructor to initialise
  static variable because constructor are invoked during object creation but static members are
  not dependent on the object. 
public class Number3{
    private int num;  // instance variable
    private static int static_num; // static variable or class variable
   
    static{   // static block is to initialise static member variable
      static_num=6;
      System.out.println("static block is called"); 
    }  
    
    public Number3(int num){
      this.num=num;
      System.out.println("The parameterized constructor is called");
    }

    public int getNum(){
     return num;
    }

    public int getStatic_num(){
     return static_num;
    }
   
  }

  

  public class NumberMain3 {
    public static void main(String args[]){
       Number3 num1=new Number3(1);
       Number3 num2=new Number3(2);
       Number3 num3=new Number3(3);
      
      
       System.out.println(num1.getNum());  //1
       System.out.println(num2.getNum()); // 2
       System.out.println(num3.getNum()); //3
       System.out.println(num1.getStatic_num()); //6
       System.out.println(num2.getStatic_num()); //6
       System.out.println(num3.getStatic_num()); //6
     }
  }    
[ static block is called once but as we have 3 objects so parameterized constructor is called thrice.]
  non static method is able to access the static member. We can see that getStatic_num being 
  non static is able to access the static member static_num.]

Q Can we access static variable from static method?
A yes

Q Do we need to call static method with the object?
A No . Static method can be accessed with the class name.
       But we can access static methods with the object of also.

public class Number4{
    private int num;  // instance variable
    private static int static_num; // static variable or class variable
   
    static{   // static block is to initialise static member variable
      static_num=6;
      System.out.println("static block is called"); 
    }  
    
    public Number4(int num){
      this.num=num;
      System.out.println("The parameterized constructor is called");
    }

    public int getNum(){
     return num;
    }

    public static int getStatic_num(){
     return static_num;
    }
   
  }

  

  public class NumberMain4 {
    public static void main(String args[]){
       Number4 num1=new Number4(1);
       Number4 num2=new Number4(2);
       Number4 num3=new Number4(3);
      
      
       System.out.println(num1.getNum());  //1
       System.out.println(num2.getNum()); // 2
       System.out.println(num3.getNum()); //3
       System.out.println(num1.getStatic_num()); //6
       System.out.println(num2.getStatic_num()); //6
       System.out.println(num3.getStatic_num()); //6
       System.out.println(Number4.getStatic_num()); //6 
      // The line14 is correct to access the static method
      // though we can access the static methods with the object
      // but as static methods are related to class
       // they should be accessed with the class name
     }
  }    

[ Static members( static variables and static methods) should be accessed by the class name , 
  rather than by the object name]

-----------------------------

public class Number{
     private int num;
     private static int num2;
     //static block or variable is related to the object
     // that is the reason in below code we cannot write this.num2
     public static void setNum2(int num2){
      this.num2=num2;
     }
    // In that case we have to keep the parameter name and the instance variable name different
    public static void setNum2(int n2){
      num2=n2;
     }
  }
-------------------------------------------------------------------------------
The points related to static modifier:
* A method and a variable can be declared as static.
* Outer class cannot be declared as static but inner class can be declared as static.

   public static class Demo{}   // We cannot write this
  
   public class Demo{
     public static class Inner{}
   }
* static are not related to object rather they are related to class.
* static members like variable and method can be called with object but we should call or
  access them through class name.
* static member variables are usually initialised within static block.
* a non static method can access both non static and static members.
* a static method can access only static member variable and methods.
* to access a non static member from static block , we need to create an object of the class.

 public class Demo {
     int i;

     public static void main(String args[]){
     System.out.println(i);
     }
   }
[The above code is incorrect because we trying to access a non static member(i) from a static 
 method ( main). We cannot do that . For accessing a non static member , we have to create
 an object of the class and then access . So below Demo2 is correct]
  
  public class Demo2 {
     int i;

     public static void main(String args[]){
     Demo2 demo=new Demo2();
     System.out.println(demo.i);
     }
   }
* Why main method is declared as static?
